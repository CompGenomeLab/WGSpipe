def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

trace {
    enabled = true
    file = "${launchDir}/reports/trace.txt"
    overwrite = true
}

report {
    enabled = true
    file = "${launchDir}/reports_dv/report.html"
    overwrite = true    
}

process{
    withName:SAM_INDEX_REF_FASTA{
        container = "Singularity/sam.sif"
    }
    withName:GATK_CREATE_DICTIONARY{
        container = 'Singularity/gatk4.sif'
    }
    withName:FASTQC{
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        container = 'Singularity/fastqc.sif'
    }
    withName:MULTIQC{
        container = 'Singularity/multiqc.sif'
    }
    withName:BWA_INDEX{
        container = 'Singularity/bwa.sif'
    }
     withName:TRIM_FASTP{
        cpus   = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        container = 'Singularity/fastp.sif'
    }
    withName:GATK_INDEX{
        container = 'Singularity/gatk4.sif'
    }
    withName:BWA_MEM{
        cpus   = { check_max( 24 * task.attempt, 'cpus' ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
        container = 'Singularity/bwa.sif'
    }
    withName:SAM_CONVERTER{
        cpus = 4
        container = "Singularity/sam.sif"
    }
    withName:'MARK_DEDUP|MARK_DEDUP_PICARD'{
        cpus   = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
        container = "Singularity/gatk4.sif"
    }
    withName:'BASE_RECAP|BASE_RECAP_PICARD|APPLY_BQSR|APPLY_BQSR_PICARD|HAPLOTYPECALLER'{
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        container = "Singularity/gatk4.sif"
    }
    withName:DEEPVARIANT{
        cpus = 6
        container = "Singularity/deepvariant.sif"
    }
    withName:FREEBAYES{
        cpus = 6
        container = "Singularity/freebayes.sif"
    }
    withName:'VAR_RECAL|APPLY_VQSR|VARIANT_FILTER'{
        container = "Singularity/gatk4.sif"
    }
    withName:FUNCOTATOR{
        container = "Singularity/gatk4.sif"
    }
    withName:ANNOVAR{
        cpus = 6
        container = "Singularity/annovar.sif"
    }
    withName:HAPPY{
        container = "Singularity/happy.sif"
    }
    withName:'SNPEFF_DB|SNPEFF'{
        container = "Singularity/snpeff.sif"
    } 
}

profiles {
    conda {
        conda.enabled           = true
        singularity.enabled     = true
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
    }
}

includeConfig 'genome.config'

